a. Types of memory-
1. Statistically Allocated Memory-
STACK
2. Dynamically Allocated Memory-
HEAP
Intro to Pointers

b. Arrays and Vectors- 1D data structures containing the elements. list of data values, inside them we can store multiple values.
### Statically Allocated Memory
- **When**: Decided when you write the code.
- **Where**: Uses a small, fast part of memory called the stack.
- **How Long**: Stays in memory while the program or function is running.
- **Example**: `int numbers[10];`
- **Pros**: Quick and easy to use.
- **Cons**: Size is fixed and can't be changed.

### Dynamically Allocated Memory
- **When**: Decided while the program is running.
- **Where**: Uses a larger, slower part of memory called the heap.
- **How Long**: Stays in memory until you manually free it.
- **Example**: `int *numbers = malloc(10 * sizeof(int));`
- **Pros**: Can change size as needed.
- **Cons**: Slower and you need to remember to free the memory to avoid leaks.
The memory section in which they are stored as arrays are statically allocated(STACK) and vectors are dynamically allocated(HEAP- intro to pointers in c and cpp programming) 

c. Memory managment of arrays and vectors (pointers)-
In arrays- memory allocation is done by malloc function and deletion of that memory is done by free function which is important 
whereas
In vectors- by new int and by delete[] function respectively.

d. Manipulating Arrays and Vectors
How to read, write and use values inside of this data structures

e. Matrices
They are multi- dimensional collection of datas arranged in order of rows and columns or a 2D array basically.
Declaring, manipulating, and managing the memory of matrices




